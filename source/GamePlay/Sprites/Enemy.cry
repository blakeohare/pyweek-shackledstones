import Math;
import Random;

class Enemy {
	field name;
	field id;
	field is_enemy = true;
	field explode_on_impact = false;
	field x = 100;
	field y = 100;
	field layer = 'A';
	field r = 8;
	field direction = 'right';
	field walking = false;
	field expired = false;
	field state = 'standing';
	field flying = false;
	field frozen = false;
	field is_goody = false;
	field state_counter = 0;
	field dx = 0;
	field dy = 0;
	field life = 0;
	field flash_counter = -1;
	field flying_damage = -42;
	field damage_dx = 0.0;
	field damage_dy = 0.0;
	field game_scene;
	
	constructor(name, id = null) {
		this.name = name;
		this.id = id;
		this.game_scene = getActiveGame().getActiveGameScene();
		
		switch (this.name) {
			case 'blob':
				this.life = 2;
				this.state = 'thinking';
				this.state_counter = Random.randomInt(30);
				this.r = 8;
				break;
				
			case 'eyeball':
				this.life = 2;
				this.state = 'walking';
				this.state_counter = Random.randomInt(30);
				this.r = 8;
				break;
				
			case 'mechanicalman':
				this.life = 4;
				this.state = 'walking';
				this.state_counter = Random.randomInt(30);
				this.r = 8;
				break;
				
			case 'beetle':
				this.life = 1;
				this.state = 'walking';
				this.state_counter = Random.randomInt(30);
				this.r = 8;
				break;
				
			case 'death':
				this.r = 16;
				this.life = 15;
				this.state = 'walking';
				break;
			default:
				throw new Exception();
		}
	}
	
	function drawingCoords() {
		offsets = [0, 0];
		switch (this.name) {
			case 'mechanicalman':
				offsets = [0, -6];
				break;
			case 'eyeball':
				offsets = [0, (this.state_counter / 10) & 1];
				break;
			case 'death':
				offsets = [0, 8];
				break;
			default: break;
		}
		coords = [this.x - this.r - offsets[0], this.y - this.r - offsets[1]];
		
		return coords;
	}
	
	function get_goody() {
		i = Random.randomInt(10);
		g = null;
		if (this.name == 'death') return null;
		
		if (i < 3) {
			g = new Goody('life');
		} else {
			g = new Goody('money');
		}
			
		if (g != null) {
			g.layer = this.layer;
			g.x = this.x;
			g.y = this.y;
		}
		return g;
	}
	
	function update() {
		this.dx = 0;
		this.dy = 0;
		this.state_counter -= 1;
		this.flash_counter -= 1;
		this.flying_damage -= 1;
		player_x = this.game_scene.player.x;
		player_y = this.game_scene.player.y;
		
		delta_x = this.x - player_x;
		delta_y = this.y - player_y;
		
		dc = null;
		for (death_circle : this.game_scene.death_circles) {
			if (death_circle.touches_sprite(this)) {
				dc = death_circle;
				this.flash_counter = 10;
				this.life -= 1;
				this.flying_damage = 9;
				nv = get_normalized_vector(death_circle.x, death_circle.y, this.x, this.y);
				this.damage_dx = nv[0] * 4;
				this.damage_dy = nv[1] * 4;
			}
		}
		
		if (this.life <= 0) {
			this.expired = true;
			goody = this.get_goody();
			if (goody != null) {
				this.game_scene.sprites.add(goody);
			}
			return;
		}
		
		if (this.flying_damage > 0) {
			this.dx = Math.floor(this.damage_dx);
			this.dy = Math.floor(this.damage_dy);
		} else if (!this.frozen) {
			if (this.name == 'death') {
				if (player_x < this.x) {
					this.dx = -1;
				} else if (player_x > this.x) {
					this.dx = 1;
				}
				if (player_y < this.y) {
					this.dy = -1;
				} else if (player_y > this.y) {
					this.dy = 1;
				}
			} else if (this.name == 'blob') {
				if (this.state_counter <= 0) {
					if (this.state == 'thinking') {
						this.state = 'approach';
						this.state_counter = 15;
					} else if (this.state == 'approach') {
						this.state = 'thinking';
						this.state_counter = 30;
					}
				}
				if (this.state == 'approach') {
					if (player_x > this.x) {
						this.dx = 1;
					} else if (player_x < this.x) {
						this.dx = -1;
					}
					if (player_y > this.y) {
						this.dy = 1;
					} else if (player_y < this.y) {
						this.dy = -1;
					}
				}
			} else if (this.name == 'eyeball' || this.name == 'beetle') {
				if (this.state_counter <= 0) {
					this.state_counter = 50;
					if (this.name == 'beetle') {
						this.state_counter = 50;
					}
					this.direction = random_choice('right left down up'.split(' '));
				}
					
				if (this.direction == 'left') {
					this.dx = -1;
				} else if (this.direction == 'right') {
					this.dx = 1;
				} else if (this.direction == 'up') {
					this.dy = -1;
				} else {
					this.dy = 1;
				}
			} else if (this.name == 'mechanicalman') {
				if (this.state_counter <= 0) {
					if (this.state == 'walking') {
						this.state = 'standing';
					} else if (this.state == 'standing') {
						this.state = 'walking';
					}
					this.state_counter = 15;
				}
				if (this.state == 'walking') {
					if (abs(delta_x) > abs(delta_y)) {
						if (delta_x > 0) {
							this.direction = 'left';
							this.dx = -1;
						} else {
							this.direction = 'right';
							this.dx = 1;
						}
					} else {
						if (delta_y > 0) {
							this.direction = 'up';
							this.dy = -1;
						} else {
							this.direction = 'down';
							this.dy = 1;
						}
					}
				}
			}
		}
	}
	
	function currentImage(render_counter) {
		if (this.frozen) render_counter = 0;
		if (this.flash_counter > 0 && (this.flash_counter & 2) == 0) {
			return null;
		}
		
		switch (this.name) {
			case 'blob':
				counter = str((render_counter / 4) & 1);
				return get_image('sprites/blob/anim' + counter);
				
			case 'death':
				counter = ['0','1','0','2'][render_counter & 3];
				return get_image('sprites/death/' + counter);
				
			case 'eyeball':
				return get_image('sprites/eyeball/' + this.direction);
				
			case 'beetle':
				counter = str(1 + ((render_counter / 4) & 1));
				f = 'horizontal';
				if (this.direction == 'up' || this.direction == 'down') {
					f = 'vertical';
				}
				return get_image('sprites/beetle/' + f + counter);
				
			case 'mechanicalman':
				if (this.state == 'standing') {
					counter = '0';
				} else {
					counter = ['0','1','0','2'][render_counter & 3];
				}
				return get_image('sprites/mechanicalman/' + this.direction + str(counter));
			
			default:
				return get_image('sprites/blob/anim0');
		}
	}
}
